import React, { useState, useEffect } from 'react';

import Head from 'next/head'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
// import Image from "next/image";
import axiosClient from '@/libraries/axiosClient';
import Navbar from '@/components/Navbar/navbar'
import Slide from '@/components/Navigation/slide'
import Categories from '@/pages/categories'
import Information from '@/components/Information/Information'
import Footer from '@/components/Footer/footer'
import Hotsale from '@/components/hotSale'
import ProductSP from '@/components/productSP';
import ProductRandom from "@/components/productRandom"
import Wrapper from '@/components/wrapper'
import Products from './product'




export default function Home({ productsSale, productSP, categories, random ,products}) {
  return (
    <>
      <Head>
        {/* <title>Shop Smart Phone</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" /> */}
      </Head>
      <div>
        <div className={`${styles.main} `}>
          <Navbar />
          {/* <Header/> */}
          <Slide />

          <Categories categories={categories} />
          <ProductRandom random={random} />
          <Hotsale productsSale={productsSale} />
          <ProductSP productSP={productSP} />

          <Wrapper />
          <Information />

          <Footer />


        </div>
      </div>
    </>
  )
}

export async function getServerSideProps() {
  try {
    const response = await axiosClient.get('/user/products');
    const responseSale = await axiosClient.get('questions/hotSale');
    const responseSP = await axiosClient.get('questions/spRandom');
    const responseRandom = await axiosClient.get('questions/productRandom');

    const filter = await axiosClient.get('user/categories');



    return {
      props: {
        products: response.data.payload,
        productsSale: responseSale.data.payload,
        productSP: responseSP.data.payload,
        categories: filter.data.payload,
        random: responseRandom.data.payload,


      },

    };
  } catch (error) {
    return {
      notFound: true,
    };
  }
}
